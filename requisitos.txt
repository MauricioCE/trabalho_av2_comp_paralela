Título: Análise de Desempenho de Algoritmos de Busca em Ambientes Concorrentes e Paralelos: Um Estudo Comparativo em Java

Resumo:
Este trabalho propõe uma análise detalhada do desempenho de diferentes algoritmos de busca em ambientes seriais e paralelos, utilizando a linguagem de programação Java. A busca por eficiência computacional é essencial em diversas aplicações, e entender como diferentes algoritmos se comportam em diferentes cenários de processamento é de suma importância. Neste estudo, serão abordados quatro algoritmos de busca populares, tanto em suas implementações sequenciais quanto em versões paralelizadas. Serão realizadas análises comparativas utilizando uma variedade de conjuntos de dados de entrada e ajustando o número de núcleos de processamento. Os resultados serão registrados em arquivos CSV, permitindo uma análise visual através de gráficos ou processamento adicional utilizando Java.

Objetivos:

1.       Implementar quatro algoritmos de busca em Java (entre os descritos a seguir):

1. Bubble Sort;
2. Quick Sort;
3.  Merge Sort;
4.Selection Sort;
5. Counting Sort; e 
6. Insertion Sort.

2.     Realizar análises de desempenho comparativas entre as versões sequenciais e paralelas dos algoritmos de busca. Atenção aos elementos a seguir:
- Variar o tamanho e a natureza dos conjuntos de dados de entrada para examinar o impacto no desempenho, usando o intervalo de valores em função do tempo;
- Realizar uma execução Serial;
- Realizar execuções paralelas - Variar  a quantidade de threads usadas;
- Pelo menos 5 amostras de cada execução, afim de ter amostras
  suficientes para gerar os gráficos de análise.

3.     Investigar o comportamento dos algoritmos sob diferentes configurações de processamento paralelo, ajustando o número de núcleos de processamento disponíveis.

4.     Gerar arquivos CSV contendo os resultados das análises para facilitar a visualização e o processamento posterior.
*** EXTRA *** Tentar usar gráficos dinâmicos. 
Dica: 
- Usar Swing Java, JUPITER ou JSF (api Prime Faces) - n (PONTO EXTRA)

5.     Elaborar um relatório com uma apresentação dos resultados e códigos utilizados. Usar o template e atenção com deve ser elaborado:
- Resumo
- Introdução – Descrevam os métodos escolhidos e a abordagem para o trabalho.
- Metodologia - “Análise estatística dos resultados obtidos para identificar padrões de desempenho e comparar os algoritmos sob diferentes condições“.
- Resultados e Discussão – Apresente as análises dos resultados dos testes, com percepção e demonstração dos gráficos das execuções.
- Conclusão
- Referências
- Anexos – Códigos das implementações - LINK DO GITHUB

Metodologia:
Implementação dos algoritmos de busca em Java, tanto em versões sequenciais quanto paralelas, utilizando as melhores práticas de programação concorrente.
Desenvolvimento de um "framework de teste" que permita variar o tamanho e a complexidade dos conjuntos de dados de entrada.
A ideia é que cada método possa ser implementado com um algoritmo serial e paralelo de ordenação.
Execução dos testes em diferentes ambientes de processamento, variando o número de núcleos disponíveis.
Registro dos tempos de execução e outros parâmetros relevantes em arquivos CSV.
Análise estatística dos resultados obtidos para identificar padrões de desempenho e comparar os algoritmos sob diferentes condições.

Resultados Esperados:
Espera-se obter uma compreensão mais profunda do desempenho relativo dos algoritmos de busca em ambientes seriais e paralelos. Os resultados fornecerão insights sobre quais algoritmos são mais adequados para diferentes tipos de problemas e como o desempenho é afetado por fatores como o tamanho do conjunto de dados e o número de núcleos de processamento. Além disso, os arquivos CSV gerados permitirão uma análise visual clara dos resultados em gráficos e facilitarão a comparação com estudos futuros.
Este trabalho contribuirá para o avanço do conhecimento em computação concorrente e paralela, fornecendo informações valiosas para desenvolvedores e pesquisadores interessados em otimizar o desempenho de algoritmos em sistemas distribuídos e multicore.

O trabalho será feito em DUPLA 
A nota será de até 2 pontos.
As apresentações serão indicadas pelo professor.